
/////////////////////////////////////////////////////////
// MAX_INT and MIN_INT
/////////////////////////////////////////////////////////

const MAX_INT: int;
const MIN_INT: int;
// axiom (forall i: int :: (i != MIN_INT && i != MAX_INT) ==> (MIN_INT < i && i < MAX_INT));

/////////////////////////////////////////////////////////
// Default models for set, queue and stack
/////////////////////////////////////////////////////////

/********************
// SET
record Set<T> {
  items: [T]bool;
}

procedure {:isatomic} {:autolabel} {:ispublic} {:skipmc} set_add<U>(s: Set U, x: U)
{
  s.items[x] := true;
}

procedure {:isatomic} {:autolabel} {:ispublic} {:skipmc} set_remove<U>(s: Set U, x: U)
{
  s.items[x] := false;
}

procedure {:isatomic} {:autolabel} {:ispublic} {:skipmc} set_contains<U>(s: Set U, x: U) returns(r: bool)
{
  r := (s.items[x] == true);
}
********************/

/********************
// QUEUE
record Queue<T> {
  items: [int]T;
  head: int;
  tail: int;
}

//invariant (forall<U> q: Queue U :: q.head <= q.tail);

procedure {:isatomic} {:autolabel} {:ispublic} {:skipmc} queue_isempty<U>(q: Queue U) returns(e: bool) {
  e := (q.head == q.tail);
}

procedure {:isatomic} {:autolabel} {:ispublic} {:skipmc} queue_enqueue<U>(q: Queue U, x: U) {
     q.items[q.tail] := x;
     q.tail := q.tail + 1;
}

procedure {:isatomic} {:autolabel} {:ispublic} {:skipmc} queue_dequeue<U>(q: Queue U) returns(x: U) {
     assert q.head < q.tail; // queue is not empty
     x := q.items[q.head];
     q.head := q.head + 1;
}
********************/
/*
procedure removeAny() returns(s:Solution) {
  var q: Queue;
  var i: int;
  atomic {
     assert head < tail; // queue is not empty
     havoc i;
     assume head <= i && i < tail;
     s := queue[i];

    // reorganize the queue
    havoc q;
    assume (forall j: int :: head <= j && j < i ==> queue[j] == q[j]);
    assume (forall j: int :: i < j && j < tail ==> queue[j] == q[j-1]);
    queue := q;
  }
}
*/

/********************
// STACK
record Stack<T> {
  items: [int]T;
  top: int;
}

//invariant (forall<U> s: Stack U :: s.top >= -1);

procedure {:isatomic} {:autolabel} {:ispublic} {:skipmc} stack_isempty<U>(s: Stack U) returns(e: bool) {
  e := (s.top == -1);
}

procedure {:isatomic} {:autolabel} {:ispublic} {:skipmc} stack_push<U>(s: Stack U, x: U) {
     s.top := s.top + 1;
     s.items[s.top] := x;
}

procedure {:isatomic} {:autolabel} {:ispublic} {:skipmc} stack_pop<U>(s: Stack U) returns(x: U) {
     assert s.top >= 0; // queue is not empty
     x := s.items[s.top];
     s.top := s.top - 1;
}
********************/

/********************
// PRIORITY QUEUE
record PrioQueue<T> {
  items: [int]T;
  prio: [int]int;
  last: int;
}

//invariant (forall<U> q: Queue U :: q.head <= q.tail);

procedure {:isatomic} {:autolabel} {:ispublic} {:skipmc} prioqueue_isempty<U>(q: PrioQueue U) returns(e: bool) {
  e := (q.last == -1);
}

procedure {:isatomic} {:autolabel} {:ispublic} {:skipmc} prioqueue_enqueue<U>(q: PrioQueue U, x: U, p: int) {
   q.last := q.last + 1;
   q.items[q.last] := x;
   q.prio[q.last] := 1;
}

procedure {:isatomic} {:autolabel} {:ispublic} {:skipmc} prioqueue_dequeue<U>(q: PrioQueue U) returns(x: U, p: int) {
    assert q.last >= 0; // queue is not empty
    x := q.items[q.last];
    p := q.prio[q.last];
    q.last := q.last - 1;
}
********************/

/////////////////////////////////////////////////////////
// owner field of records
/////////////////////////////////////////////////////////

function ThreadLocal(TID) returns(bool);
axiom (forall t: TID :: {ThreadLocal(t)} ThreadLocal(t) <==> (t==tid));


/////////////////////////////////////////////////////////
// Allocatedness
/////////////////////////////////////////////////////////

type AllocType;

const unique Alloc: AllocType;

const unique Dealloc: AllocType;

const unique Null: AllocType;

axiom (forall a: AllocType :: a == Alloc || a == Dealloc || a == Null);

function IsAlloc(AllocType) returns (bool);
axiom (forall a: AllocType :: {IsAlloc(a)} IsAlloc(a) <==> a == Alloc);

function IsDealloc(AllocType) returns (bool);
axiom (forall a: AllocType :: {IsDealloc(a)} IsDealloc(a) <==> a == Dealloc);

function IsNull(AllocType) returns (bool);
axiom (forall a: AllocType :: {IsNull(a)} IsNull(a) <==> a == Null);

/////////////////////////////////////////////////////////
// Locking
/////////////////////////////////////////////////////////

record Mutex { owner: TID; }

procedure {:isatomic} {:skipmc} lock(m: Mutex)
{
lock: atomic {
    assume m.owner == 0;
    m.owner := tid;
  }
}

procedure {:isatomic} {:skipmc} trylock(m: Mutex) returns (succ: bool)
{
trylock: atomic {
    succ := m.owner == 0;
    if(succ == true) {
       m.owner := tid;
    }
  }
}

procedure {:isatomic} {:skipmc} unlock(m: Mutex)
{
unlock: atomic {
    assert m.owner == tid;
    m.owner := 0;
  }
}

/////////////////////////////////////////////////////////
// Threads
/////////////////////////////////////////////////////////

type TID = int;

const unique tid: TID;

const unique tidx: TID;

axiom 0 < tid && 0 < tidx && tid != tidx;

const Tid: TID;

axiom 0 < Tid && tid <= Tid && tidx <= Tid;

record Thread
{
	id: TID;
	interrupted: boolean;
	// parked: boolean;
}

var Threads: [int]Thread;

// define the null thread
const unique NULL_THREAD: Thread;
axiom (IsNull(NULL_THREAD.alloc));

//invariant (forall i: int :: i <= 0 ==> (Threads[i]) == NULL_THREAD);
//invariant (forall i: int :: i >= 0 ==> (Threads[i]).id == i);

/********************
// This is the model of native isInterrupted() method of the Thread.java
procedure {:isatomic} {:ispublic} {:skipmc} Thread_nativeIsInterrupted(this: Thread, clearInterrupted: bool) returns (result: bool)
{
	result := (this.interrupted == True);
	if (result)
	{
		if (clearInterrupted)
		{
			this.interrupted := False;
		}
	}
}

// interrupt() method
procedure {:isatomic} {:skipmc} Thread_interrupt(this: Thread)
{
	this.interrupted := True;
}

// return the current thread
procedure {:isatomic} {:skipmc} Thread_currentThread() returns (result: Thread) 
{
	result := Threads[tid];
}
********************/

/*
procedure Thread_interrupted() returns (result: bool)
{
	var currentThread: Thread;
	
	call currentThread := Thread_currentThread();
	call result := Thread_nativeIsInterrupted(currentThread, true);
}
*/

/////////////////////////////////////////////////////////
// Exceptions
/////////////////////////////////////////////////////////

type Exception;

const unique ExReturn: Exception;

const unique ExSkip: Exception;

const unique ExBreak: Exception;

const unique ExContinue: Exception;


// common exceptions
const unique NullPointerException: Exception;
const unique InterruptedException: Exception;
const unique Error: Exception;
const unique IllegalMonitorStateException: Exception;
const unique RuntimeException: Exception;

axiom subtype(NullPointerException, RuntimeException);
axiom subtype(IllegalMonitorStateException, RuntimeException);
// Note that in java Error is not a RuntimeException!
// axiom subtype(Error, RuntimeException);

/////////////////////////////////////////////////////////
// Subtyping for exceptions
/////////////////////////////////////////////////////////

function subtype(Exception, Exception) returns (bool);
// reflexive
axiom (forall e: Exception :: subtype(e,e));
// transitive
axiom (forall e1,e2,e3: Exception :: {subtype(e1,e2), subtype(e2,e3)} (subtype(e1,e2) && subtype(e2,e3)) ==> subtype(e1,e3));

/////////////////////////////////////////////////////////
// Boolean type
/////////////////////////////////////////////////////////

type boolean;

const unique True: boolean;

const unique False: boolean;

axiom (forall b: boolean :: b == True || b == False);

function toBool(boolean) returns (bool);
axiom (toBool(True) == true) && (toBool(False) == false);

function toBoolean(bool) returns (boolean);
axiom (toBoolean(true) == True) && (toBoolean(false) == False);

/////////////////////////////////////////////////////////
// Long type
/////////////////////////////////////////////////////////

type long = int;

/////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////
// Reachability axioms
/////////////////////////////////////////////////////////

// interpreted "store1" function in Boogie
// function store1(f: [T]T, p: T, q: T) returns ([T]T);

////////////////////
// Between predicate
//////////////////// 
function ReachBetween<T>(f: [T]T, x: T, y: T, z: T) returns (bool);
function ReachAvoiding<T>(f: [T]T, x: T, y: T, z: T) returns (bool);


//////////////////////////
// Between set constructor
//////////////////////////
function ReachBetweenSet<T>(f: [T]T, x: T, z: T) returns ([T]bool);

////////////////////////////////////////////////////
// axioms relating ReachBetween and ReachBetweenSet
////////////////////////////////////////////////////
axiom(forall<T> f: [T]T, x: T, y: T, z: T :: {ReachBetweenSet(f, x, z)[y]} ReachBetweenSet(f, x, z)[y] <==> ReachBetween(f, x, y, z));
axiom(forall<T> f: [T]T, x: T, y: T, z: T :: {ReachBetween(f, x, y, z), ReachBetweenSet(f, x, z)} ReachBetween(f, x, y, z) ==> ReachBetweenSet(f, x, z)[y]);
axiom(forall<T> f: [T]T, x: T, z: T :: {ReachBetweenSet(f, x, z)} ReachBetween(f, x, x, x));


//////////////////////////
// Axioms for ReachBetween
//////////////////////////

// reflexive
axiom(forall<T> f: [T]T, x: T :: ReachBetween(f, x, x, x));

// step
//axiom(forall f: [T]T, x: T :: {f[x]} ReachBetween(f, x, f[x], f[x])); 
axiom(forall<T> f: [T]T, x: T, y: T, z: T, w:T :: {ReachBetween(f, y, z, w), f[x]} ReachBetween(f, x, f[x], f[x])); 

// reach
axiom(forall<T> f: [T]T, x: T, y: T :: {f[x], ReachBetween(f, x, y, y)} ReachBetween(f, x, y, y) ==> x == y || ReachBetween(f, x, f[x], y));

// cycle
axiom(forall<T> f: [T]T, x: T, y:T :: {f[x], ReachBetween(f, x, y, y)} f[x] == x && ReachBetween(f, x, y, y) ==> x == y);

// sandwich
axiom(forall<T> f: [T]T, x: T, y: T :: {ReachBetween(f, x, y, x)} ReachBetween(f, x, y, x) ==> x == y);

// order1
axiom(forall<T> f: [T]T, x: T, y: T, z: T :: {ReachBetween(f, x, y, y), ReachBetween(f, x, z, z)} ReachBetween(f, x, y, y) && ReachBetween(f, x, z, z) ==> ReachBetween(f, x, y, z) || ReachBetween(f, x, z, y));

// order2
axiom(forall<T> f: [T]T, x: T, y: T, z: T :: {ReachBetween(f, x, y, z)} ReachBetween(f, x, y, z) ==> ReachBetween(f, x, y, y) && ReachBetween(f, y, z, z));

// transitive1
axiom(forall<T> f: [T]T, x: T, y: T, z: T :: {ReachBetween(f, x, y, y), ReachBetween(f, y, z, z)} ReachBetween(f, x, y, y) && ReachBetween(f, y, z, z) ==> ReachBetween(f, x, z, z));

// transitive2
axiom(forall<T> f: [T]T, x: T, y: T, z: T, w: T :: {ReachBetween(f, x, y, z), ReachBetween(f, y, w, z)} ReachBetween(f, x, y, z) && ReachBetween(f, y, w, z) ==> ReachBetween(f, x, y, w) && ReachBetween(f, x, w, z));

// transitive3
axiom(forall<T> f: [T]T, x: T, y: T, z: T, w: T :: {ReachBetween(f, x, y, z), ReachBetween(f, x, w, y)} ReachBetween(f, x, y, z) && ReachBetween(f, x, w, y) ==> ReachBetween(f, x, w, z) && ReachBetween(f, w, y, z));

// This axiom is required to deal with the incompleteness of the trigger for the reflexive axiom.  
// It cannot be proved using the rest of the axioms.
axiom(forall<T> f: [T]T, u:T, x: T :: {ReachBetween(f, u, x, x)} ReachBetween(f, u, x, x) ==> ReachBetween(f, u, u, x));

// relation between ReachAvoiding and ReachBetween
axiom(forall<T> f: [T]T, x: T, y: T, z: T :: {ReachAvoiding(f, x, y, z)}{ReachBetween(f, x, y, z)} ReachAvoiding(f, x, y, z) <==> (ReachBetween(f, x, y, z) || (ReachBetween(f, x, y, y) && !ReachBetween(f, x, z, z))));

// update
axiom(forall<T> f: [T]T, u: T, v: T, x: T, p: T, q: T :: {ReachAvoiding(f[p := q], u, v, x)} ReachAvoiding(f[p := q], u, v, x) <==> ((ReachAvoiding(f, u, v, p) && ReachAvoiding(f, u, v, x)) || (ReachAvoiding(f, u, p, x) && p != x && ReachAvoiding(f, q, v, p) && ReachAvoiding(f, q, v, x))));


/////////////////////////////////////////////////////////
// Set axioms
/////////////////////////////////////////////////////////

function Equal<T>([T]bool, [T]bool) returns (bool);
function Subset<T>([T]bool, [T]bool) returns (bool);
function Disjoint<T>([T]bool, [T]bool) returns (bool);

function Empty<T>(T) returns ([T]bool);
function Singleton<T>(T) returns ([T]bool);
function Reachable<T>([T,T]bool, T) returns ([T]bool);
function Union<T>([T]bool, [T]bool) returns ([T]bool);
function Intersection<T>([T]bool, [T]bool) returns ([T]bool);
function Difference<T>([T]bool, [T]bool) returns ([T]bool);
function Dereference<T>([T]bool, [T]T) returns ([T]bool);
function Inverse<T>(f:[T]T, x:T) returns ([T]bool);

axiom(forall<T> x,y:T :: !Empty(y)[x]);

axiom(forall<T> x:T, y:T :: {Singleton(y)[x]} Singleton(y)[x] <==> x == y);
axiom(forall<T> y:T :: {Singleton(y)} Singleton(y)[y]);

/* this formulation of Union IS more complete than the earlier one */
/* (A U B)[e], A[d], A U B = Singleton(c), d != e */
axiom(forall<T> x:T, S:[T]bool, T:[T]bool :: {Union(S,T)[x]} Union(S,T)[x] <==> S[x] || T[x]);
axiom(forall<T> x:T, S:[T]bool, T:[T]bool :: {Union(S,T), S[x]} S[x] ==> Union(S,T)[x]);
axiom(forall<T> x:T, S:[T]bool, T:[T]bool :: {Union(S,T), T[x]} T[x] ==> Union(S,T)[x]);

axiom(forall<T> x:T, S:[T]bool, T:[T]bool :: {Intersection(S,T)[x]} Intersection(S,T)[x] <==>  S[x] && T[x]);
axiom(forall<T> x:T, S:[T]bool, T:[T]bool :: {Intersection(S,T), S[x]} S[x] && T[x] ==> Intersection(S,T)[x]);
axiom(forall<T> x:T, S:[T]bool, T:[T]bool :: {Intersection(S,T), T[x]} S[x] && T[x] ==> Intersection(S,T)[x]);

axiom(forall<T> x:T, S:[T]bool, T:[T]bool :: {Difference(S,T)[x]} Difference(S,T)[x] <==> S[x] && !T[x]);
axiom(forall<T> x:T, S:[T]bool, T:[T]bool :: {Difference(S,T), S[x]} S[x] ==> Difference(S,T)[x] || T[x]);

axiom(forall<T> x:T, S:[T]bool, M:[T]T :: {Dereference(S,M)[x]} Dereference(S,M)[x] ==> (exists y:T :: x == M[y] && S[y]));
axiom(forall<T> x:T, S:[T]bool, M:[T]T :: {M[x], S[x], Dereference(S,M)} S[x] ==> Dereference(S,M)[M[x]]);
axiom(forall<T> x:T, y:T, S:[T]bool, M:[T]T :: {Dereference(S,M[x := y])} !S[x] ==> Equal(Dereference(S,M[x := y]), Dereference(S,M)));
axiom(forall<T> x:T, y:T, S:[T]bool, M:[T]T :: {Dereference(S,M[x := y])} 
     S[x] &&  Equal(Intersection(Inverse(M,M[x]), S), Singleton(x)) ==> Equal(Dereference(S,M[x := y]), Union(Difference(Dereference(S,M), Singleton(M[x])), Singleton(y))));
axiom(forall<T> x:T, y:T, S:[T]bool, M:[T]T :: {Dereference(S,M[x := y])} 
     S[x] && !Equal(Intersection(Inverse(M,M[x]), S), Singleton(x)) ==> Equal(Dereference(S,M[x := y]), Union(Dereference(S,M), Singleton(y))));

axiom(forall<T> f:[T]T, x:T :: {Inverse(f,f[x])} Inverse(f,f[x])[x]);
axiom(forall<T> f:[T]T, x:T, y:T :: {Inverse(f,y), f[x]} Inverse(f,y)[x] ==> f[x] == y);

axiom(forall<T> f:[T]T, x:T, y:T :: {Inverse(f[x := y],y)} Equal(Inverse(f[x := y],y), Union(Inverse(f,y), Singleton(x))));
axiom(forall<T> f:[T]T, x:T, y:T, z:T :: {Inverse(f[x := y],z)} y == z || Equal(Inverse(f[x := y],z), Difference(Inverse(f,z), Singleton(x))));

axiom(forall<T> S:[T]bool, T:[T]bool :: {Equal(S,T)} Equal(S,T) <==> Subset(S,T) && Subset(T,S));
axiom(forall<T> x:T, S:[T]bool, T:[T]bool :: {S[x], Subset(S,T)} S[x] && Subset(S,T) ==> T[x]);
axiom(forall<T> S:[T]bool, T:[T]bool :: {Subset(S,T)} Subset(S,T) || (exists x:T :: S[x] && !T[x]));
axiom(forall<T> x:T, S:[T]bool, T:[T]bool :: {S[x], Disjoint(S,T), T[x]} !(S[x] && Disjoint(S,T) && T[x]));
axiom(forall<T> S:[T]bool, T:[T]bool :: {Disjoint(S,T)} Disjoint(S,T) || (exists x:T :: S[x] && T[x]));

/////////////////////////////////////////////////////////
// Connected function
/////////////////////////////////////////////////////////

function Connected<T>(f: [T]T, x: T, y: T) returns (bool);

axiom (forall<T> f: [T]T, x: T, y: T :: {Connected(f, x, y)} Connected(f, x, y) <==> (ReachBetween(f, x, y, y) || ReachBetween(f, y, x, x)));

/////////////////////////////////////////////////////////
// Equality axioms for arrays
/////////////////////////////////////////////////////////

function Equals<T,K>([T]K, [T]K) returns (bool);
axiom(forall<T,K> A,B:[T]K :: {Equals(A,B)} Equals(A,B) || (exists x:T :: A[x] != B[x]));
axiom(forall<T,K> A,B:[T]K, x:T :: {Equals(A,B), A[x]} {Equals(A,B), B[x]} Equals(A,B) <==> (A[x] == B[x]));

/*************************************************/
/************** Ismail added  TSO abstractions : Primitive Types ***************/

invariant (forall t:thread, i:int :: t.h_value_of_var[i]<=t.t_value_of_var[i]);
invariant (forall t:thread :: t.wb_tail >= t.wb_head);
invariant (forall idx:int , t:thread :: idx >= t.wb_head && idx< t.wb_tail ==> t.h_value_of_var[t.wb[idx].addr]  < t.t_value_of_var[t.wb[idx].addr]);

invariant (forall t:TID , v:variable, i:int  :: 
  (i >= ThreadPool[t].h_value_of_var[v.addr] &&  i < ThreadPool[t].t_value_of_var[v.addr] && v.dirty[tid])  
	==>
  (ThreadPool[t].indx_of_var[v.addr,i] >= ThreadPool[t].wb_head && ThreadPool[t].indx_of_var[v.addr,i] < ThreadPool[t].wb_tail ));
	
invariant (forall v1,v2:variable :: v1!= v2 <==> v1.addr != v2.addr);
invariant (forall t1,t2:TID :: ThreadPool[t1] != ThreadPool[t2] <==> t1 != t2);
//invariant(forall index_addr:int :: ref_to_variable[index_addr].value[ADDR]== index_addr);

record variable{

	value:int ; // value of variable : Note: ref type may be used
	addr:int; // addr of variable : Note: ref tpye may be used.
	ver:int ; // global version number of a variable

	dirty:[TID]bool; // is there is any write in any of buffer for this variable then it is false
	allocation:bool;
	
	valInbuffers:[TID]int ; // value of recent write in ThreadPool[tid]
	indxInbuffers:[TID]int; // index of recent value in ThreadPool[tid]
}

/*
record assignment{
	addr:int;
	value:int ;
}*/

record thread{
	
	t_id : TID;
	wb_head:int;
	wb_tail:int;
	wb:[int]assignment;
	
	value_of_var:[int, int]int;// variabes to its values in thread tid
	h_value_of_var:[int]int; // h_value_of_var<=idx < t_value_of_var
	t_value_of_var:[int]int; //  h_value_of_var<=idx < t_value_of_var
	indx_of_var:[int,int]int; // addr , h_value_of_var<=idx < t_value_of_var ==> wb_head <= indx_int_thread_buf < wb_tail
	
}


var ThreadPool:[TID]thread;
var thread_local_to_variable:[int]variable;


procedure {:isatomic true} drain_last()

{
	
	
var bastakiAdres:int ;

bastakiAdres := ThreadPool[tid].wb[ThreadPool[tid].wb_head].addr;
	
assert (ThreadPool[tid].t_value_of_var[bastakiAdres] == ThreadPool[tid].h_value_of_var[bastakiAdres] +1);

assert ((ThreadPool[tid].wb_head + 1 ) == ThreadPool[tid].wb_tail);


assert thread_local_to_variable[bastakiAdres].dirty[tid];
assert 	ThreadPool[tid].indx_of_var[bastakiAdres,ThreadPool[tid].h_value_of_var[bastakiAdres]] == ThreadPool[tid].wb_head;
assert	ThreadPool[tid].indx_of_var[bastakiAdres,ThreadPool[tid].t_value_of_var[bastakiAdres]] == ThreadPool[tid].wb_tail;	
		
thread_local_to_variable[bastakiAdres].value := 
      ThreadPool[tid].value_of_var[bastakiAdres,ThreadPool[tid].h_value_of_var[bastakiAdres]];  
thread_local_to_variable[bastakiAdres].ver := 
    thread_local_to_variable[bastakiAdres].ver + 1;
thread_local_to_variable[bastakiAdres].dirty[tid] := false;

// Violates		
ThreadPool[tid].h_value_of_var[bastakiAdres] := ThreadPool[tid].h_value_of_var[bastakiAdres] + 1;
ThreadPool[tid].wb_head := ThreadPool[tid].wb_head + 1;
		
assert  ThreadPool[tid].h_value_of_var[bastakiAdres] == ThreadPool[tid].t_value_of_var[bastakiAdres]; 
assert  !thread_local_to_variable[bastakiAdres].dirty[tid];
assert 	ThreadPool[tid].wb_head == ThreadPool[tid].wb_tail;	
assert false;			
}

procedure {:isatomic true} write_to_ptr(taddr:variable, offset:int, sval:int){
	
	var as:assignment;
	var bastakiAdres :int;

	var oldH :int ;
	var oldT:int;


	
	assume offset >=0 ;
	bastakiAdres := taddr.addr+offset;
	assert ThreadPool[tid].wb_tail == ThreadPool[tid].wb_head ;
	assert ThreadPool[tid].t_value_of_var[bastakiAdres] == ThreadPool[tid].h_value_of_var[bastakiAdres];

	assert ThreadPool[tid].indx_of_var[bastakiAdres, ThreadPool[tid].h_value_of_var[bastakiAdres]] == ThreadPool[tid].wb_head ;
	assert ThreadPool[tid].indx_of_var[bastakiAdres, ThreadPool[tid].h_value_of_var[bastakiAdres]] == ThreadPool[tid].indx_of_var[bastakiAdres, ThreadPool[tid].t_value_of_var[bastakiAdres]];
	
	oldH := ThreadPool[tid].h_value_of_var[bastakiAdres];
	oldT := ThreadPool[tid].t_value_of_var[bastakiAdres];

	as.value := sval;
	as.addr := bastakiAdres;
	
	thread_local_to_variable[bastakiAdres].valInbuffers[tid] := sval;
	thread_local_to_variable[bastakiAdres].dirty[tid]:= true; // burada 0'inci adresten sonra her bir variable size'inda bu offsete kadar olan tum variable'lar dirty mi ?
	thread_local_to_variable[bastakiAdres].indxInbuffers[tid] := ThreadPool[tid].wb_tail;
	
	ThreadPool[tid].wb[ThreadPool[tid].wb_tail] := as;
	ThreadPool[tid].value_of_var[bastakiAdres,ThreadPool[tid].t_value_of_var[bastakiAdres]] := as.value;
	ThreadPool[tid].indx_of_var[bastakiAdres, ThreadPool[tid].t_value_of_var[bastakiAdres]] := ThreadPool[tid].wb_tail;
	
	
	
	////
	
	assert as.addr ==  bastakiAdres;
	assert as.value == sval;
	assert ThreadPool[tid].t_value_of_var[as.addr] == ThreadPool[tid].h_value_of_var[as.addr];
	
	
	assert ThreadPool[tid].indx_of_var[bastakiAdres,oldH] == ThreadPool[tid].wb_head ;	
	assert ThreadPool[tid].indx_of_var[bastakiAdres,oldT] == ThreadPool[tid].wb_tail ;
	
	ThreadPool[tid].t_value_of_var[bastakiAdres] := ThreadPool[tid].t_value_of_var[bastakiAdres]+1;
	
	ThreadPool[tid].wb_tail := ThreadPool[tid].wb_tail + 1;
	
	assert false;
}


procedure {:isatomic true} write(taddr:variable, sval : int){

	var as:assignment;
	var oldH :int ;
	var oldT:int;
	//assert ThreadPool[tid].wb_tail == ThreadPool[tid].wb_head ;
	//assert ThreadPool[tid].t_value_of_var[ThreadPool[tid].wb[ThreadPool[tid].wb_tail].addr] == ThreadPool[tid].t_value_of_var[ThreadPool[tid].wb[ThreadPool[tid].wb_tail].addr];
	
	assert ThreadPool[tid].wb_tail == ThreadPool[tid].wb_head ;
	assert ThreadPool[tid].t_value_of_var[taddr.addr] == ThreadPool[tid].h_value_of_var[taddr.addr];
	assert ThreadPool[tid].indx_of_var[taddr.addr, ThreadPool[tid].h_value_of_var[taddr.addr]] == ThreadPool[tid].wb_head ;
	assert ThreadPool[tid].indx_of_var[taddr.addr, ThreadPool[tid].h_value_of_var[taddr.addr]] == ThreadPool[tid].indx_of_var[taddr.addr, ThreadPool[tid].t_value_of_var[taddr.addr]];

	oldH := ThreadPool[tid].h_value_of_var[taddr.addr];
	oldT := ThreadPool[tid].t_value_of_var[taddr.addr];
	
	as.value := sval;
	as.addr := taddr.addr;
	
	taddr.valInbuffers[tid] :=  sval;
	taddr.dirty[tid] := true;
	taddr.indxInbuffers[tid] := ThreadPool[tid].wb_tail;

	ThreadPool[tid].wb[ ThreadPool[tid].wb_tail] := as;
	
	ThreadPool[tid].value_of_var[taddr.addr,ThreadPool[tid].t_value_of_var[taddr.addr]] := as.value;
	ThreadPool[tid].indx_of_var[taddr.addr,ThreadPool[tid].t_value_of_var[taddr.addr]] := ThreadPool[tid].wb_tail;

	assert as.addr == taddr.addr;
	assert as.value == sval;
	assert ThreadPool[tid].t_value_of_var[as.addr] == ThreadPool[tid].h_value_of_var[as.addr];
	
	
	assert ThreadPool[tid].indx_of_var[taddr.addr,oldH] == ThreadPool[tid].wb_head ;	
	assert ThreadPool[tid].indx_of_var[taddr.addr,oldT] == ThreadPool[tid].wb_tail ;
	
	ThreadPool[tid].t_value_of_var[taddr.addr] := ThreadPool[tid].t_value_of_var[taddr.addr]+1;
	
	ThreadPool[tid].wb_tail := ThreadPool[tid].wb_tail + 1;
	
	assert false;
}


procedure {:isatomic true} read_from_ptr(toRead:variable, offset:int) returns(result:int){

	
	if(*){
		//assume tid == recvThread || tid == senderThread;
		assume offset >= 0;
		assume ThreadPool[tid].t_value_of_var[toRead.addr] == ThreadPool[tid].h_value_of_var[ toRead.addr] ;
		assume ThreadPool[tid].wb_head == ThreadPool[tid].wb_tail;
		assume (!toRead.dirty[tid]);
		
		result := toRead.value;
	
	}
	else{
		assume offset >= 0;
		assume ThreadPool[tid].t_value_of_var[toRead.addr] > ThreadPool[tid].h_value_of_var[toRead.addr] ;
		assume ThreadPool[tid].wb_head < ThreadPool[tid].wb_tail;
		assume (toRead.dirty[tid]);
	
		result := toRead.valInbuffers[tid];

	}
	


}
procedure {:isatomic true} read(toRead:variable) returns(result : int ){

	if(*){
	//assume tid == recvThread || tid == senderThread;
		assume ThreadPool[tid].t_value_of_var[toRead.addr] == ThreadPool[tid].h_value_of_var[ toRead.addr] ;
		assume ThreadPool[tid].wb_head == ThreadPool[tid].wb_tail;
		assume (!toRead.dirty[tid]);
		
		result := toRead.value;
	
	}
	else{
	
		assume ThreadPool[tid].t_value_of_var[toRead.addr] > ThreadPool[tid].h_value_of_var[toRead.addr] ;
		assume ThreadPool[tid].wb_head < ThreadPool[tid].wb_tail;
		assume (toRead.dirty[tid]);
	
		result := toRead.valInbuffers[tid];

	}
}
/*********************************************Primitive types for tso**********************************************************/



/************Ismail addded for TSO non-primitive heap types**************/


type field ;

const unique ADDR :field ;
const unique VAL : field ;
const unique VERSION:field ;
const unique NEXT_PTR : field ;
const unique DIRTY: field ;
const  unique ALLOC : field ; // Allocation'i da VALUE ile erisilebilinir hale getir
const unique REC_VAL : field ;
const unique INDX_BUF : field ;



// Probably ADDR, VAL and NEXT_PTR is enough !!!
axiom (forall fld : field ::fld == ADDR ||
	fld == VAL ||
	fld == VERSION ||
	fld == NEXT_PTR ||
	fld == DIRTY ||
	fld == ALLOC ||
	fld == REC_VAL ||
	fld == INDX_BUF);


record ref{
	addr : int ;
}
	
record variable_heap{
	
	value:[field]int;// value of variable : holds any addr of any type.
	ver:int ; // global version number of a variable.
	//heapState:allocation;
	dirty:[TID,field]bool; // is there is any write in any of buffer for this variable then it is false
	valInbuffers:[TID,field]int ; // value of recent write in ThreadPool[tid]
	indxInbuffers:[TID]int; // index of recent value in ThreadPool[tid]
}


record assignment{
	addr:int;
	f_n:field;
	value:int ;
}


var ref_to_variable:[int]variable_heap;	

/*Predicate to check a reference  refers to null heap location*/

function null_reference( referecen :ref) returns(bool);
axiom (forall refer : ref :: null_reference(refer) <==> refer.addr == null_heap_allocation.value[ADDR]); 

const unique null_heap_allocation : variable_heap;

procedure {:isatomic true} new_heap_variable() returns (reference_to_heap:ref){
	
	
	havoc reference_to_heap;

	assume ref_to_variable[reference_to_heap.addr] != null_heap_allocation;
	
	
}



procedure {:isatomic true} drain_last_heap()
{
		
		
	var bastakiAdres:int ;
	var bastakiFieldNum:field;
	var bastakiValue : int;
	var dirtySet : bool;
	
	var ref_to_flush : ref;
	
	
	bastakiAdres := ThreadPool[tid].wb[ThreadPool[tid].wb_head].addr;
	bastakiFieldNum := ThreadPool[tid].wb[ThreadPool[tid].wb_head].f_n;
	bastakiValue := ThreadPool[tid].wb[ThreadPool[tid].wb_head].value;
	
	//ref_to_flush := var_to_reference[bastakiAdres];
	
	assert (ThreadPool[tid].t_value_of_var[bastakiAdres] == ThreadPool[tid].h_value_of_var[bastakiAdres] +1);
	assert ((ThreadPool[tid].wb_head + 1 ) == ThreadPool[tid].wb_tail);


	assert ref_to_variable[bastakiAdres].dirty[tid,bastakiFieldNum];
	assert 	ThreadPool[tid].indx_of_var[bastakiAdres,ThreadPool[tid].h_value_of_var[bastakiAdres]] == ThreadPool[tid].wb_head;
	assert	ThreadPool[tid].indx_of_var[bastakiAdres,ThreadPool[tid].t_value_of_var[bastakiAdres]] == ThreadPool[tid].wb_tail;	
	

	ref_to_variable[bastakiAdres].value[bastakiFieldNum] := 
		  ThreadPool[tid].value_of_var[bastakiAdres,ThreadPool[tid].h_value_of_var[bastakiAdres]];  
	
	
	// same addresses same variables ??
	assert ref_to_variable[bastakiAdres] == ref_to_variable[ThreadPool[tid].value_of_var[bastakiAdres,ThreadPool[tid].h_value_of_var[bastakiAdres]]];
	
	ref_to_variable[bastakiAdres].value[VERSION] := 
		ref_to_variable[bastakiAdres].value[VERSION] + 1;
	


	ref_to_variable[bastakiAdres].dirty[tid, bastakiFieldNum] := false;	

	// Violates		
	ThreadPool[tid].h_value_of_var[bastakiAdres] := ThreadPool[tid].h_value_of_var[bastakiAdres] + 1;
	ThreadPool[tid].wb_head := ThreadPool[tid].wb_head + 1;
			
	assert  ThreadPool[tid].h_value_of_var[bastakiAdres] == ThreadPool[tid].t_value_of_var[bastakiAdres]; 
	assert  !ref_to_variable[bastakiAdres].dirty[tid,bastakiFieldNum];
	assert 	ThreadPool[tid].wb_head == ThreadPool[tid].wb_tail;	
	assert false;			
}


procedure {:isatomic true} write_heap(taddrR:ref, sval:int, fld:field){

	var as:assignment;
	var oldH :int ;
	var oldT:int;
	var taddr : variable_heap;
	//var sval : variable_heap;
	var dirtySet:bool;
	
	taddr := ref_to_variable[taddrR.addr];
	
	assert taddr.value[ADDR] == taddrR.addr;
	assert ThreadPool[tid].wb_tail == ThreadPool[tid].wb_head ;
	
	assert ThreadPool[tid].t_value_of_var[taddr.value[ADDR]] == ThreadPool[tid].h_value_of_var[taddr.value[ADDR]];
	
	assert ThreadPool[tid].indx_of_var[taddr.value[ADDR], ThreadPool[tid].h_value_of_var[taddr.value[ADDR]]] == ThreadPool[tid].wb_head ;
	
	assert ThreadPool[tid].indx_of_var[taddr.value[ADDR], ThreadPool[tid].h_value_of_var[taddr.value[ADDR]]] == 
			ThreadPool[tid].indx_of_var[taddr.value[ADDR], ThreadPool[tid].t_value_of_var[taddr.value[ADDR]]];

	
 
	oldH := ThreadPool[tid].h_value_of_var[taddr.value[ADDR]];
	oldT := ThreadPool[tid].t_value_of_var[taddr.value[ADDR]];
	
	as.value := sval;
	as.addr := taddr.value[ADDR];
	as.f_n :=  fld;
	
	taddr.valInbuffers[tid,fld] :=  sval;
	taddr.dirty[tid,fld] := true;
	taddr.indxInbuffers[tid] := ThreadPool[tid].wb_tail;
	
	ThreadPool[tid].wb[ ThreadPool[tid].wb_tail] := as;
	
	ThreadPool[tid].value_of_var[taddr.value[ADDR],ThreadPool[tid].t_value_of_var[taddr.value[ADDR]]] := as.value;
	ThreadPool[tid].indx_of_var[taddr.value[ADDR],ThreadPool[tid].t_value_of_var[taddr.value[ADDR]]] := ThreadPool[tid].wb_tail;

	assert as.addr == taddr.value[ADDR];
	assert as.value == sval;
	assert ThreadPool[tid].t_value_of_var[as.addr] == ThreadPool[tid].h_value_of_var[as.addr];
	
	
	assert ThreadPool[tid].indx_of_var[taddr.value[ADDR],oldH] == ThreadPool[tid].wb_head ;	
	assert ThreadPool[tid].indx_of_var[taddr.value[ADDR],oldT] == ThreadPool[tid].wb_tail ;
	
	ThreadPool[tid].t_value_of_var[taddr.value[ADDR]] := ThreadPool[tid].t_value_of_var[taddr.value[ADDR]]+1;
	
	ThreadPool[tid].wb_tail := ThreadPool[tid].wb_tail + 1;
	
	assert false;
}

procedure {:isatomic true} read_heap(toReadR:ref, fld:field) returns(result : int ){

	var toRead : variable_heap;
	toRead := ref_to_variable[toReadR.addr];

		if(*){
			
			assume ThreadPool[tid].t_value_of_var[toRead.value[ADDR]] == ThreadPool[tid].h_value_of_var[ toRead.value[ADDR]] ;
			assume ThreadPool[tid].wb_head == ThreadPool[tid].wb_tail;
			assume (!toRead.dirty[tid,fld]);
		//	assume (!toReadR.fieldsMap[fld]);
			
			result := toRead.value[fld];
		
		}
		else{
		
			assume ThreadPool[tid].t_value_of_var[toRead.value[ADDR]] > ThreadPool[tid].h_value_of_var[toRead.value[ADDR]] ;
			assume ThreadPool[tid].wb_head < ThreadPool[tid].wb_tail;
			assume (toRead.dirty[tid,fld]);
			//assume (toReadR.fields[fld]);
		
			result := toRead.valInbuffers[tid,fld];

		}
}