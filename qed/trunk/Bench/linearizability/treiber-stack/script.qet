reduce all
peelout Atomic_4
simulate Atomic_4 assume last >= 0;                 assume timeSeq[last] <= time;                 t := Htop[timeSeq[last]];                 last := last + 1;                 assert n.owner == tid;                 n.next := t;                 assert IsAlloc(n.alloc) && n.owner == tid; assume TOP != t;
simulate Atomic_4_dup assume last >= 0;                 assume timeSeq[last] <= time;                 t := Htop[timeSeq[last]];                 last := last + 1;                 assert n.owner == tid;                 n.next := t;                 assert IsAlloc(n.alloc) && n.owner == tid;                 assume (TOP == t);                                      time := time + 1;                     Hnext[time] := Hnext[time - 1];                     Htop[time] := n;                     TOP := n;                     n.owner := 0;
peelout Atomic_9
simulate Atomic_9 assume last >= 0;                 assume timeSeq[last] <= time;                 t := Htop[timeSeq[last]];                 last := last + 1;                 assume (t != null);                 assert IsAlloc(t.alloc);                 assert t.owner == 0;                 assume last >= 0;                 assume timeSeq[last] <= time;                 n := Hnext[timeSeq[last]][t];                 last := last + 1;                 assert !IsDealloc(n.alloc) && n.owner == 0;                 assume (TOP != t);
simulate Atomic_9_dup assume last >= 0;                 assume timeSeq[last] <= time;                 t := Htop[timeSeq[last]];                 last := last + 1;                 if (t == null)                 {                     v := EMPTY;                     return;                 }                  assert IsAlloc(t.alloc);                 assert t.owner == 0;                 assume last >= 0;                 assume timeSeq[last] <= time;                 n := Hnext[timeSeq[last]][t];                 last := last + 1;                 assert !IsDealloc(n.alloc) && n.owner == 0;                 assume(TOP == t);                                      time := time + 1;                     Hnext[time] := Hnext[time - 1];                     Htop[time] := n;                     TOP := n;
simulate Atomic_9_dup assume last >= 0;                 assume timeSeq[last] <= time;                 t := Htop[timeSeq[last]];                 last := last + 1;                 if (t == null)                 {                     v := EMPTY;                     return;                 }                  assert IsAlloc(t.alloc);                 assert t.owner == 0;                 assume last >= 0;                 assume timeSeq[last] <= time;                 n := Hnext[timeSeq[last]][t];                 last := last + 1;                 assert !IsDealloc(n.alloc) && n.owner == 0;                 assume(TOP == t);                                      time := time + 1;                     Hnext[time] := Hnext[time - 1];                     Htop[time] := n;                     TOP := n; havoc ex;
