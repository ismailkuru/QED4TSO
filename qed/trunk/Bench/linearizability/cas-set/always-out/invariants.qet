#################

## Representation invariants

invariant  (forall n: Node :: {n.alloc} IsNull(n.alloc) <==> n == null)

invariant  Head.key == MIN_INT && Tail.key == MAX_INT && Head.marked == True && Tail.marked == True && null.marked == True && IsAlloc(Head.alloc) && IsAlloc(Tail.alloc) && Tail.next == null && null.next == null && (forall n: Node :: {n.alloc} IsAlloc(n.alloc) ==> ReachBetweenSet(Node_next, n, Tail)[Tail]) && (forall n: Node :: {ReachBetweenSet(Node_next, n, Tail)[Tail]} ReachBetweenSet(Node_next, n, Tail)[Tail] ==> IsAlloc(n.alloc)) && (forall n: Node :: {n.alloc}{n.next} !IsAlloc(n.alloc) ==> n.next == n) && (forall n: Node :: {n.next} n.next != Head)

# need a reduction before the next invariant
#reduce all

invariant  (forall n: Node :: {ReachBetweenSet(Node_next, Head, Tail)[n]}{n.marked} n.marked == False ==> ReachBetweenSet(Node_next, Head, Tail)[n])

invariant  (forall n, m: Node :: {ReachBetweenSet(Node_next, n, m)[m]}{n.alloc,m.alloc} IsAlloc(n.alloc) && IsAlloc(m.alloc) && n != m && ReachBetweenSet(Node_next, n, m)[m] ==> n.key < m.key)

## these are already implied
invariant (forall n: Node :: {ReachBetweenSet(Node_next, Head, Tail)[n]} ReachBetweenSet(Node_next, Head, Tail)[n] ==> ReachBetweenSet(Node_next, n, Tail)[Tail])
invariant (forall n,m: Node :: {ReachBetweenSet(Node_next, n, Tail)[m]} ReachBetweenSet(Node_next, n, Tail)[m] ==> ReachBetweenSet(Node_next, n, m)[m])
invariant (forall n,m: Node :: {ReachBetweenSet(Node_next, Head, m)[n]} ReachBetweenSet(Node_next, Head, m)[n] ==> ReachBetweenSet(Node_next, n, m)[m])

#################

## implied invariants (Ali)
invariant (forall n,m : Node :: ReachBetweenSet(Node_next, Head, Tail)[m] && m.key==n.key && n != m ==> !ReachBetweenSet(Node_next, Head, Tail)[n])
invariant (forall n,m : Node :: {ReachBetweenSet(Node_next, m, Tail)[n]} ReachBetweenSet(Node_next, Head, Tail)[m] && ReachBetweenSet(Node_next, m, Tail)[n] && m!=n ==> m.key<n.key)
invariant (forall n,m : Node :: {ReachBetweenSet(Node_next, m, n)[n]} ReachBetweenSet(Node_next, Head, Tail)[m] && ReachBetweenSet(Node_next, m, n)[n] && m !=n && n != null==> m.key<n.key)
invariant (forall n,m : Node :: {ReachBetweenSet(Node_next,Head,m)[n]} ReachBetweenSet(Node_next,Head,n)[n] && n.next==m ==> ReachBetweenSet(Node_next,Head,m)[n])
invariant (forall n,m : Node :: {ReachBetweenSet(Node_next,Head,m)[n]} ReachBetweenSet(Node_next,Head,n)[n] && Node_next[n]==m ==> ReachBetweenSet(Node_next,Head,m)[n])

#################
invariant (forall x,y,z: Node :: z.marked == False && x.key <= y.key && z.key == E && !ReachBetweenSet(Node_next, x, z)[z] ==> !ReachBetweenSet(Node_next, y, z)[z])
# ReachBetweenSet(Node_next, x, Tail)[Tail] && ReachBetweenSet(Node_next, y, Tail)[Tail] && ReachBetweenSet(Node_next, z, Tail)[Tail] && 