localinv find e==E
localinv contains e==E

inline all

# always out
splitinv (forall n: Node :: {n.key}{n.marked}{ReachBetweenSet(Node_next, Head, n)[n]} n.key == E ==> n.marked == True || !ReachBetweenSet(Node_next, Head, n)[n])

reduce all

# introduce all invariants
include invariants.qet

localinv contains (forall n: Node :: n.key == e && ReachBetweenSet(Node_next, curr, n)[n] ==> n.marked == True)

simulate Atomic_4 \\
	 pred := Head; \\
	 havoc curr; \\
	 assume ReachBetweenSet(Node_next, pred.next, Tail)[curr]; \\
	 assume (forall n: Node :: {ReachBetweenSet(Node_next, pred.next, curr)[n]}{n.marked} ReachBetweenSet(Node_next, pred.next, curr)[n] && n != curr ==> n.marked == True);\\
	 succ := null;

simulate Call_7 \\
	 assert ReachBetweenSet(Node_next, curr, Tail)[curr]; \\
	 havoc succ; \\
	 assume ReachBetweenSet(Node_next, curr.next, succ)[succ]; \\
	 assume curr.marked == True ==> curr.next == succ; \\
	 assume (forall n: Node :: {ReachBetweenSet(Node_next, pred.next, curr)[n]}{n.marked} ReachBetweenSet(Node_next, curr.next, succ)[n] && n != succ ==> n.marked == True); \\
	 marked := toBool(curr.marked);

simulate Atomic_44 \\
	 pred := Head; \\
	 havoc curr; \\
	 assume ReachBetweenSet(Node_next, pred.next, Tail)[curr]; \\
	 assume (forall n: Node :: {ReachBetweenSet(Node_next, pred.next, curr)[n]}{n.marked} ReachBetweenSet(Node_next, pred.next, curr)[n] && n != curr ==> n.marked == True);\\
	 succ := null;

simulate Call_47 \\
	 assert ReachBetweenSet(Node_next, curr, Tail)[curr]; \\
	 havoc succ; \\
	 assume ReachBetweenSet(Node_next, curr.next, succ)[succ]; \\
	 assume curr.marked == True ==> curr.next == succ; \\
	 assume (forall n: Node :: {ReachBetweenSet(Node_next, curr.next, succ)[n]}{n.marked} ReachBetweenSet(Node_next, curr.next, succ)[n] && n != succ ==> n.marked == True); \\
	 marked := toBool(curr.marked);

simulate Atomic_8 \\
	 assert IsAlloc(pred.alloc) && ReachBetweenSet(Node_next, pred, Tail)[Tail];\\
	 assert IsAlloc(succ.alloc) && ReachBetweenSet(Node_next, succ, Tail)[Tail];\\
	 assert IsAlloc(curr.alloc) && ReachBetweenSet(Node_next, curr, Tail)[Tail];\\
	 assert curr.marked == True && curr.next == succ;\\
	 assume pred.marked == False;\\
	 havoc curr;\\
	 assume ReachBetweenSet(Node_next, pred.next, curr)[curr]; \\
	 assume IsAlloc(curr.alloc) && ReachBetweenSet(Node_next, curr, Tail)[Tail];\\
	 assume (forall n: Node :: {ReachBetweenSet(Node_next, pred.next, curr)[n]}{n.marked} ReachBetweenSet(Node_next, pred.next, curr)[n] && curr != n ==> n.marked == True);\\
	 pred.next := curr;\\
         succ := curr.next;\\
         marked := toBool(curr.marked);\\
	 havoc snip;\\
	 assert !marked ==> curr.key != e;

simulate Atomic_48 \\
	 assert IsAlloc(pred.alloc) && ReachBetweenSet(Node_next, pred, Tail)[Tail];\\
	 assert IsAlloc(succ.alloc) && ReachBetweenSet(Node_next, succ, Tail)[Tail];\\
	 assert IsAlloc(curr.alloc) && ReachBetweenSet(Node_next, curr, Tail)[Tail];\\
	 assert curr.marked == True && curr.next == succ;\\
	 assume pred.marked == False;\\
	 havoc curr;\\
	 assume ReachBetweenSet(Node_next, pred.next, curr)[curr]; \\
	 assume IsAlloc(curr.alloc) && ReachBetweenSet(Node_next, curr, Tail)[Tail];\\
	 assume (forall n: Node :: {ReachBetweenSet(Node_next, pred.next, curr)[n]}{n.marked} ReachBetweenSet(Node_next, pred.next, curr)[n] && curr != n ==> n.marked == True);\\
	 pred.next := curr;\\
         succ := curr.next;\\
         marked := toBool(curr.marked);\\
	 havoc snip;\\
	 assert !marked ==> curr.key != e;


peelout Atomic_8
merge proc find
peelout Atomic_48
merge proc contains
check find
check contains

