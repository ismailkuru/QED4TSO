reduce all

# introduce all invariants
include invariants2.qet

check all

# use \\ for commands spanning multiple lines
simulate Atomic_1 \\
	assume e == E; \\
        havoc qseq, qcount, pred, cseq, m; \\
	assume 1 <= qcount; \\
	assume (forall i: int :: { qseq[i] } 1 <= i && i <= qcount ==> 0 <= qseq[i] && qseq[i] <= Hcount); \\
	assume (forall i,j: int :: { qseq[i],qseq[j] } 1 <= i && i <= j && j <= qcount ==> qseq[i] <= qseq[j]); \\
        assume m.key == e && (forall i: int :: {qseq[i]} 1 <= i && i <= qcount ==> Hmarked[qseq[i]][m] == False && ReachBetweenSet(Hnext[qseq[i]], Head, Tail)[m]); \\
	assume (forall i: int :: {cseq[i]} 1 <= i && i <= qcount ==> cseq[i].key <= e && ReachBetweenSet(Hnext[qseq[i]], cseq[i], Tail)[m]); \\
	curr := cseq[qcount];

mover Atomic_1

reduce loop2 Atomic_1

reduce proc contains

check all
