reduce all

# introduce all invariants
include invariants3.qet

check all

# use \\ for commands spanning multiple lines
simulate Atomic_1 \\
	assume e == E; \\
        havoc qseq, qcount, pred, cseq; \\
	assume 1 <= qcount; \\
	assume (forall i: int :: { qseq[i] } 1 <= i && i <= qcount ==> 0 <= qseq[i] && qseq[i] <= Hcount); \\
	assume (forall i,j: int :: { qseq[i],qseq[j] } 1 <= i && i <= j && j <= qcount ==> qseq[i] <= qseq[j]); \\
	assume (forall i: int :: {cseq[i]} 1 <= i && i <= qcount ==> ReachBetweenSet(Hnext[qseq[i]], cseq[i], Tail)[Tail]); \\
        assume (forall i: int, m: Node :: {cseq[i],m.key} 1 <= i && i <= qcount && \\
	       	       	       	  m.key == E ==> !ReachBetweenSet(Hnext[qseq[i]], cseq[i], Tail)[m]); \\
	curr := cseq[qcount];

mover Atomic_1

reduce loop2 Atomic_1

reduce proc contains

check all
