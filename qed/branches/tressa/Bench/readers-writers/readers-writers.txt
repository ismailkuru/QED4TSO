
var w : bool;
var c : int;
var obj : ref;

var lock : bool;

procedure {:atomic 1} acquire()
	modifies lock;
	ensures (old(lock) == false) && (lock == true);
{
	assume lock == false;
	lock := true;
}

procedure {:atomic 1} release()
	requires lock == true;
	modifies lock;
	ensures lock == false;
{
	lock := false;
}

procedure {:check 1} ReadObj() returns (r : ref)
	ensures r == obj && r != null;
{
	assume(obj != null);
	r := obj;
	return;
}

procedure {:check 1} AcqRead()
	ensures (old(w) == false) && (c == old(c) + 1);
{
	var done : bool;
	
	done := false;
	
	while(!done) {
		call acquire();
			if(w == false)
			{
				c := c + 1;
				done := true;
			}
		call release()
	}
	return;
}
	
procedure {:check 1} RelRead()
	ensures (c == old(c) - 1);
{
	call acquire();
	c := c - 1;
	call release();
}

procedure {:check 1} AcqWrite() returns (r : bool)
	ensures (old(c) == 0) && (w == true);
{	
	var done : bool;
		
	done := false;

	while(!done) {
		call acquire();
			if(c == 0)
			{
				w := true;
				done := true;
			}
		call release()
	}
	return;
}

procedure {:check 1} RelWrite()
	ensures (w == false);
{
	call acquire();
	w := false;
	call release();
}


procedure {:check 1} ReadEntry() returns (r : ref)
{
	
	call AcqRead();
	r := obj;
	call RelRead();
	return;
}


procedure {:check 1} WriteEntry(x : ref)
{
	call AcqWrite();
	obj := x;
	call RelWrite();
	return;
}